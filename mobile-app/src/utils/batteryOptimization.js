import { Alert, Linking, Platform } from 'react-native';
import * as IntentLauncher from 'expo-intent-launcher';

class BatteryOptimizationHelper {
  
  // Verificar y solicitar exclusi√≥n de optimizaci√≥n de bater√≠a
  async requestBatteryOptimizationExemption() {
    if (Platform.OS !== 'android') return true;

    try {
      Alert.alert(
        'üîã Configuraci√≥n Cr√≠tica para Deliveries',
        'Para mantener el GPS activo cuando guardas el tel√©fono en el bolsillo:\n\n' +
        '1Ô∏è‚É£ Optimizaci√≥n de Bater√≠a:\n' +
        '   ‚Ä¢ Ve a Configuraci√≥n ‚Üí Bater√≠a\n' +
        '   ‚Ä¢ Optimizaci√≥n de bater√≠a\n' +
        '   ‚Ä¢ Busca "Boston Tracker"\n' +
        '   ‚Ä¢ Selecciona "No optimizar"\n\n' +
        '2Ô∏è‚É£ Administraci√≥n de Energ√≠a:\n' +
        '   ‚Ä¢ Busca "Administraci√≥n de energ√≠a"\n' +
        '   ‚Ä¢ Aplicaciones protegidas\n' +
        '   ‚Ä¢ Activar Boston Tracker\n\n' +
        '3Ô∏è‚É£ Inicio Autom√°tico:\n' +
        '   ‚Ä¢ Configuraci√≥n ‚Üí Apps\n' +
        '   ‚Ä¢ Boston Tracker ‚Üí Inicio autom√°tico\n' +
        '   ‚Ä¢ Activar todas las opciones',
        [
          { 
            text: 'Ir a Configuraci√≥n', 
            onPress: () => this.openBatterySettings() 
          },
          { 
            text: 'Configurar Despu√©s', 
            style: 'cancel' 
          }
        ]
      );

      return true;
    } catch (error) {
      console.error('Error configurando optimizaci√≥n de bater√≠a:', error);
      return false;
    }
  }

  // Abrir configuraci√≥n de bater√≠a
  async openBatterySettings() {
    try {
      if (Platform.OS === 'android') {
        // Intentar abrir configuraci√≥n de optimizaci√≥n de bater√≠a
        await IntentLauncher.startActivityAsync(
          IntentLauncher.ActivityAction.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS,
          {
            data: 'package:com.bostonburgers.tracker'
          }
        );
      } else {
        // Para iOS, abrir configuraci√≥n general
        await Linking.openSettings();
      }
    } catch (error) {
      console.log('No se pudo abrir configuraci√≥n espec√≠fica, abriendo configuraci√≥n general');
      await Linking.openSettings();
    }
  }

  // Mostrar gu√≠a de configuraci√≥n manual
  showManualConfigGuide() {
    Alert.alert(
      'üì± Gu√≠a de Configuraci√≥n Manual',
      'Si el GPS se detiene en background, configura manualmente:\n\n' +
      'üîã BATER√çA:\n' +
      '‚Ä¢ Configuraci√≥n ‚Üí Bater√≠a ‚Üí Optimizaci√≥n ‚Üí Boston Tracker ‚Üí No optimizar\n\n' +
      'üöÄ INICIO AUTOM√ÅTICO:\n' +
      '‚Ä¢ Configuraci√≥n ‚Üí Apps ‚Üí Boston Tracker ‚Üí Inicio autom√°tico ‚Üí Activar\n\n' +
      'üîí BLOQUEO DE PANTALLA:\n' +
      '‚Ä¢ Permitir que la app funcione con pantalla bloqueada\n\n' +
      'üìç UBICACI√ìN:\n' +
      '‚Ä¢ Configuraci√≥n ‚Üí Ubicaci√≥n ‚Üí Boston Tracker ‚Üí Permitir siempre',
      [
        { text: 'Entendido', style: 'default' },
        { text: 'Abrir Configuraci√≥n', onPress: () => Linking.openSettings() }
      ]
    );
  }

  // Verificar si las configuraciones est√°n optimizadas
  async checkOptimizationStatus() {
    // Esta funci√≥n ayuda a verificar si las configuraciones est√°n correctas
    const issues = [];

    try {
      // Verificar permisos de ubicaci√≥n
      const Location = require('expo-location');
      const backgroundPermission = await Location.getBackgroundPermissionsAsync();
      
      if (backgroundPermission.status !== 'granted') {
        issues.push({
          type: 'permission',
          message: 'Permiso de ubicaci√≥n en background no concedido',
          solution: 'Ir a Configuraci√≥n ‚Üí Apps ‚Üí Boston Tracker ‚Üí Permisos ‚Üí Ubicaci√≥n ‚Üí Permitir siempre'
        });
      }

      // Verificar servicios de ubicaci√≥n
      const locationEnabled = await Location.hasServicesEnabledAsync();
      if (!locationEnabled) {
        issues.push({
          type: 'service',
          message: 'Servicios de ubicaci√≥n deshabilitados',
          solution: 'Activar GPS en Configuraci√≥n ‚Üí Ubicaci√≥n'
        });
      }

    } catch (error) {
      console.error('Error verificando estado de optimizaci√≥n:', error);
    }

    return {
      isOptimized: issues.length === 0,
      issues: issues
    };
  }
}

const batteryOptimizationHelper = new BatteryOptimizationHelper();
export default batteryOptimizationHelper;
