// Servicio para manejar notificaciones de desconexi√≥n durante viajes activos
class DisconnectionService {
  constructor() {
    this.notificationSent = false;
    this.reconnectionNotificationSent = false;
    this.lastDisconnectionTime = null;
  }

  // Notificar al dashboard que el delivery perdi√≥ conexi√≥n durante un viaje
  async notifyDisconnection(userId, tripData, location = null) {
    try {
      if (this.notificationSent) {
        console.log('‚ö†Ô∏è Notificaci√≥n de desconexi√≥n ya enviada, omitiendo...');
        return;
      }

      console.log('üì° Notificando desconexi√≥n al dashboard...');
      
      const disconnectionData = {
        deliveryId: userId,
        timestamp: new Date().toISOString(),
        event: 'connection_lost',
        tripId: tripData?.id || null,
        lastKnownLocation: location,
        currentMileage: tripData?.totalMileage || 0,
        tripStartTime: tripData?.startTime || null
      };

      // Intentar notificar via Socket.io si est√° disponible
      let socketService = null;
      try {
        socketService = require('./socketService').default;
        if (socketService && socketService.isSocketConnected()) {
          console.log('üì° Enviando notificaci√≥n via Socket.io...');
          socketService.emit('delivery_disconnected', disconnectionData);
          this.notificationSent = true;
          this.lastDisconnectionTime = new Date();
          return { success: true, method: 'socket' };
        }
      } catch (error) {
        console.warn('Socket.io no disponible para notificaci√≥n de desconexi√≥n');
      }

      // Si Socket.io no est√° disponible, usar HTTP como fallback
      const apiService = require('./apiService').default;
      const result = await apiService.notifyDeliveryDisconnection(disconnectionData);
      
      if (result.success) {
        console.log('‚úÖ Notificaci√≥n de desconexi√≥n enviada via HTTP');
        this.notificationSent = true;
        this.lastDisconnectionTime = new Date();
        return { success: true, method: 'http' };
      } else {
        throw new Error(result.error || 'Error al notificar desconexi√≥n');
      }

    } catch (error) {
      console.error('‚ùå Error notificando desconexi√≥n:', error);
      return { success: false, error: error.message };
    }
  }

  // Notificar al dashboard que el delivery recuper√≥ conexi√≥n
  async notifyReconnection(userId, tripData = null, location = null) {
    try {
      if (!this.notificationSent || this.reconnectionNotificationSent) {
        console.log('‚ö†Ô∏è No hay desconexi√≥n previa o reconexi√≥n ya notificada, omitiendo...');
        return;
      }

      console.log('üì° Notificando reconexi√≥n al dashboard...');
      
      const reconnectionData = {
        deliveryId: userId,
        timestamp: new Date().toISOString(),
        event: 'connection_restored',
        tripId: tripData?.id || null,
        currentLocation: location,
        currentMileage: tripData?.totalMileage || 0,
        disconnectionDuration: this.lastDisconnectionTime ? 
          Math.floor((new Date() - this.lastDisconnectionTime) / 1000) : null
      };

      // Intentar notificar via Socket.io si est√° disponible
      let socketService = null;
      try {
        socketService = require('./socketService').default;
        if (socketService && socketService.isSocketConnected()) {
          console.log('üì° Enviando notificaci√≥n de reconexi√≥n via Socket.io...');
          socketService.emit('delivery_reconnected', reconnectionData);
          this.reconnectionNotificationSent = true;
          this.resetNotificationFlags();
          return { success: true, method: 'socket' };
        }
      } catch (error) {
        console.warn('Socket.io no disponible para notificaci√≥n de reconexi√≥n');
      }

      // Si Socket.io no est√° disponible, usar HTTP como fallback
      const apiService = require('./apiService').default;
      const result = await apiService.notifyDeliveryReconnection(reconnectionData);
      
      if (result.success) {
        console.log('‚úÖ Notificaci√≥n de reconexi√≥n enviada via HTTP');
        this.reconnectionNotificationSent = true;
        this.resetNotificationFlags();
        return { success: true, method: 'http' };
      } else {
        throw new Error(result.error || 'Error al notificar reconexi√≥n');
      }

    } catch (error) {
      console.error('‚ùå Error notificando reconexi√≥n:', error);
      return { success: false, error: error.message };
    }
  }

  // Reiniciar banderas de notificaci√≥n
  resetNotificationFlags() {
    this.notificationSent = false;
    this.reconnectionNotificationSent = false;
    this.lastDisconnectionTime = null;
    console.log('üîÑ Banderas de notificaci√≥n reiniciadas');
  }

  // Verificar si hay una desconexi√≥n pendiente de notificar
  hasPendingDisconnection() {
    return this.notificationSent && !this.reconnectionNotificationSent;
  }

  // Obtener tiempo transcurrido desde la √∫ltima desconexi√≥n
  getDisconnectionDuration() {
    if (!this.lastDisconnectionTime) return 0;
    return Math.floor((new Date() - this.lastDisconnectionTime) / 1000);
  }
}

// Instancia singleton
const disconnectionService = new DisconnectionService();

export default disconnectionService;
